# .github/workflows/ecr-deploy-lambda.yml
name: Build & Deploy Lambda (ECR image)

on:
  push:
    branches: [ main ]    # change if needed
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-1
  AWS_ACCOUNT_ID: 641675857341
  LAMBDA_NAME: planner-agent
  ECR_REPOSITORY: planner_agent

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU (optional for multi-arch builds)
      run: |
        # For standard x86_64 builds this is not required. Keep if building different architectures.
        true

    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Ensure ECR repository exists
      run: |
        repo="${{env.AWS_ACCOUNT_ID}}.dkr.ecr.${{env.AWS_REGION}}.amazonaws.com/${{env.ECR_REPOSITORY}}"
        if ! aws ecr describe-repositories --repository-names "${{env.ECR_REPOSITORY}}" --region "${{env.AWS_REGION}}" >/dev/null 2>&1; then
          echo "Creating ECR repository ${{env.ECR_REPOSITORY}}"
          aws ecr create-repository --repository-name "${{env.ECR_REPOSITORY}}" --region "${{env.AWS_REGION}}" >/dev/null
        else
          echo "ECR repository ${{env.ECR_REPOSITORY}} already exists"
        fi

    - name: Build Docker image
      run: |
        IMAGE_URI="${{env.AWS_ACCOUNT_ID}}.dkr.ecr.${{env.AWS_REGION}}.amazonaws.com/${{env.ECR_REPOSITORY}}"
        IMAGE_TAG="${GITHUB_SHA::8}-$(date +%s)"
        FULL_TAG="${IMAGE_URI}:${IMAGE_TAG}"
        echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
        echo "FULL_TAG=${FULL_TAG}" >> $GITHUB_ENV
        docker build -t "${FULL_TAG}" .

    - name: Push image to ECR
      run: |
        docker push "${{ env.FULL_TAG }}"

    - name: Update Lambda to use new image
      run: |
        IMAGE_URI="${{ env.FULL_TAG }}"
        echo "Updating Lambda ${LAMBDA_NAME} to image ${IMAGE_URI}"
        aws lambda update-function-code \
          --function-name "${LAMBDA_NAME}" \
          --image-uri "${IMAGE_URI}" \
          --region "${{env.AWS_REGION}}"

    - name: Publish new version
      id: publish
      run: |
        VERSION=$(aws lambda publish-version --function-name "${LAMBDA_NAME}" --region "${{env.AWS_REGION}}" --query 'Version' --output text)
        echo "NEW_LAMBDA_VERSION=${VERSION}" >> $GITHUB_ENV
        echo "Published version: ${VERSION}"

    - name: Update or create prod alias
      run: |
        VERSION="${{ env.NEW_LAMBDA_VERSION }}"
        if aws lambda get-alias --function-name "${LAMBDA_NAME}" --name prod --region "${{env.AWS_REGION}}" >/dev/null 2>&1; then
          aws lambda update-alias --function-name "${LAMBDA_NAME}" --name prod --function-version "${VERSION}" --region "${{env.AWS_REGION}}"
          echo "Updated alias prod -> ${VERSION}"
        else
          aws lambda create-alias --function-name "${LAMBDA_NAME}" --name prod --function-version "${VERSION}" --region "${{env.AWS_REGION}}"
          echo "Created alias prod -> ${VERSION}"
        fi

    - name: Sleep briefly to allow new image to be available (tiny buffer)
      run: sleep 3

    - name: Smoke test - invoke Lambda
      run: |
        aws lambda invoke --function-name "${LAMBDA_NAME}:prod" --payload '{"name":"CI"}' response.json --region "${{env.AWS_REGION}}"
        cat response.json
        # Simple assertion, fail workflow if we don't see Hello
        grep -q "Hello" response.json
